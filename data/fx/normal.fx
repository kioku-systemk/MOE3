VertexShader = [[attribute vec3 pos;attribute vec4 col;attribute vec3 nor;attribute vec2 uv;uniform mat4 proj;uniform mat4 view;uniform mat4 world;uniform vec4 znearfar;varying HIGHP vec3 vtx_nor;varying HIGHP vec4 opos;varying HIGHP float logz;void main(){    opos = proj * view * world * vec4(pos, 1.0);        vtx_nor = (proj * view * vec4(nor,0.0)).xyz;    float C = 1.0;    // Vertex based log scale    //opos.z = 2.0 * log(opos.w * C + 1) / log(znearfar.y * C + 1) - 1;    //opos.z *= opos.w;    logz = opos.w + 1;     gl_Position = opos;}]]FragmentShader = [[uniform sampler2D color_tex; uniform vec4 scolor;uniform sampler2D srcBuf;uniform sampler2D srcBuf_depth;uniform vec4 param;uniform vec4 time;uniform mat4 proj;uniform mat4 view;uniform vec4 demotime;uniform vec4 znearfar;varying HIGHP vec3 vtx_nor;varying HIGHP vec4 opos;varying HIGHP float logz;void main(){	vec3 N = normalize(vtx_nor);	float D = opos.z / opos.w;		//gl_FragColor = vec4(N.xy, D, 1.0);		// Fragment based log scale	float FC = 1.0 / log(znearfar.y + 1);	//gl_FragDepth = 0.5 * log(logz) * FC;gl_FragDepth = (opos.z + znearfar.x) /znearfar.y;	gl_FragColor = vec4(N,1.0);	return;		//gl_FragColor = vec4(D,D,D, 1.0); // show depth}]]GeometryShader = ""DepthTest = trueBlend = falseBlendSrc = "SRC_ALPAH"BlendDst = "ONE_MINUS_SRC_ALPHA"Priority=10