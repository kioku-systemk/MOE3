VertexShader = [[attribute vec3 pos;attribute vec4 col;attribute vec3 nor;attribute vec2 uv;uniform mat4 proj;uniform mat4 view;uniform mat4 world;varying HIGHP vec2 vtx_uv;varying vec2 coords[14];void main(){    gl_Position = vec4((pos+vec3(-0.5,-0.5,0))*2.0,1.0);    vtx_uv = pos.xy;}]]FragmentShader = [[uniform sampler2D color_tex; uniform sampler2D srcBuf;uniform sampler2D srcBuf_depth;uniform vec4 size;uniform vec4 param;uniform vec4 time;varying HIGHP vec2 vtx_uv;varying vec2 coords[14];const float blurclamp = 10.0;  // max blur amountconst float bias = 0.6;	//aperture - bigger values for shallower depth of fielduniform float focus;  // this value comes from ReadDepth script.float sms(float x) { return x*x*(3-2*x); }float hash( float n )	{	for(float i = 0.0; i < 5.0; i++){		n = fract(n * 1234.5678);	}	return fract( n );}void main() {	float aspectratio = 800.0/600.0;	vec2 aspectcorrect = vec2(1.0,aspectratio);	vec2 p = vtx_uv - vec2(0.5);	p*=-0.05;		float l = hash(vtx_uv.x * vtx_uv.y * time.x);//length(p*aspectratio);//	gl_FragColor = vec4(l,l,l,1.0);//	return;		vec4 col = vec4(0.0);	vec4 colfilter[3];	colfilter[0] = vec4(1,0,0, 1.0              );	colfilter[1] = vec4(0,1,0, 1.0 - 0.1*param.z);	colfilter[2] = vec4(0,0,1, 1.0 - 0.2*param.z);	for (int i = 0; i < 3; ++i) {		float nz = hash(vtx_uv.x * vtx_uv.y * (time.x+0.1)*(i+1));		vec2 coloffset = p*vec2(colfilter[i].w);		vec4 cfilter = colfilter[i];		vec4 depth1  = texture2D(srcBuf_depth,vtx_uv + coloffset);		//float factor = ( depth1.x - param.x );		//vec2 dofblur = vec2 (factor * param.y*0.3)*aspectcorrect;// * colfilter[i].w;		float factor = sqrt(depth1.x) - sqrt(param.x);		vec2 dofblur = aspectcorrect * abs(factor * param.y);// * 0.3;			col += texture2D(srcBuf, vtx_uv                                   + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2( 0.00, 0.40) * dofblur     + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2( 0.15, 0.37) * dofblur     + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2( 0.29, 0.29) * dofblur     + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2(-0.37, 0.15) * dofblur     + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2( 0.40, 0.00) * dofblur     + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2( 0.37,-0.15) * dofblur     + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2( 0.29,-0.29) * dofblur     + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2(-0.15,-0.37) * dofblur     + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2( 0.00,-0.40) * dofblur     + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2(-0.15, 0.37) * dofblur     + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2(-0.29, 0.29) * dofblur     + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2( 0.37, 0.15) * dofblur     + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2(-0.40, 0.00) * dofblur     + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2(-0.37,-0.15) * dofblur     + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2(-0.29,-0.29) * dofblur     + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2( 0.15,-0.37) * dofblur     + coloffset) * cfilter;				col += texture2D(srcBuf, vtx_uv + vec2( 0.15, 0.37) * dofblur*0.9 + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2(-0.37, 0.15) * dofblur*0.9 + coloffset) * cfilter;				col += texture2D(srcBuf, vtx_uv + vec2( 0.37,-0.15) * dofblur*0.9 + coloffset) * cfilter;				col += texture2D(srcBuf, vtx_uv + vec2(-0.15,-0.37) * dofblur*0.9 + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2(-0.15, 0.37) * dofblur*0.9 + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2( 0.37, 0.15) * dofblur*0.9 + coloffset) * cfilter;				col += texture2D(srcBuf, vtx_uv + vec2(-0.37,-0.15) * dofblur*0.9 + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2( 0.15,-0.37) * dofblur*0.9 + coloffset) * cfilter;					col += texture2D(srcBuf, vtx_uv + vec2( 0.29, 0.29) * dofblur*0.7 + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2( 0.40, 0.00) * dofblur*0.7 + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2( 0.29,-0.29) * dofblur*0.7 + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2( 0.00,-0.40) * dofblur*0.7 + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2(-0.29, 0.29) * dofblur*0.7 + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2(-0.40, 0.00) * dofblur*0.7 + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2(-0.29,-0.29) * dofblur*0.7 + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2( 0.00, 0.40) * dofblur*0.7 + coloffset) * cfilter;				 		col += texture2D(srcBuf, vtx_uv + vec2( 0.29, 0.29) * dofblur*0.4 + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2( 0.40, 0.00) * dofblur*0.4 + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2( 0.29,-0.29) * dofblur*0.4 + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2( 0.00,-0.40) * dofblur*0.4 + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2(-0.29, 0.29) * dofblur*0.4 + coloffset) * cfilter;		col += texture2D(srcBuf, vtx_uv + vec2(-0.40, 0.00) * dofblur*0.4 + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2(-0.29,-0.29) * dofblur*0.4 + coloffset) * cfilter;			col += texture2D(srcBuf, vtx_uv + vec2( 0.00, 0.40) * dofblur*0.4 + coloffset) * cfilter;					col += (nz - 0.5) * 3.0 * cfilter;	}			gl_FragColor = col/41.0;// * (vec4(1.0) - col- 0.05*nz);	gl_FragColor.a = 1.0;		float factor = sqrt(texture2D(srcBuf_depth,vtx_uv).x) - sqrt(param.x);	float dc = abs(factor * param.y * 10.0);		gl_FragColor = mix(gl_FragColor,vec4(dc,dc,dc,1.0), param.w);}]]GeometryShader = ""DepthTest = false