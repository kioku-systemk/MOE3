VertexShader = [[attribute vec3 pos;attribute vec4 col;attribute vec3 nor;attribute vec2 uv;uniform mat4 proj;uniform mat4 view;uniform mat4 world;varying HIGHP vec2 vtx_uv;void main(void){	vtx_uv = pos.xy;	gl_Position = vec4((pos+vec3(-0.5,-0.5,0))*2.0,1.0);}]]FragmentShader = [[uniform sampler2D color_tex; uniform vec4 scolor;uniform sampler2D srcBuf;uniform sampler2D srcBuf_depth;uniform vec4 size;uniform vec4 ep1;uniform vec4 znearfar;uniform mat4 proj;uniform mat4 view;varying HIGHP vec2 vtx_uv;const int maxCount = 64 * 4;const float PI = 3.1415926;float getFromDepthBuffer(float depthVal){	//return - znearfar.x * znearfar.y / (depthVal * (znearfar.y - znearfar.x) - znearfar.y); // Z val	float CF = log(znearfar.y + 1);	//return - znearfar.x * znearfar.y / (exp(depthVal * CF * 2.0) * (znearfar.y - znearfar.x) - znearfar.y); // Z val	return depthVal * znearfar.y - znearfar.x;}float tangent(vec3 p, vec3 s) {    return (p.z - s.z) / length(p.xy - s.xy);}void main(void){	vec3 normal = texture2D(srcBuf, vtx_uv).xyz;	vec3 depth = vec3(vtx_uv, getFromDepthBuffer(texture2D(srcBuf_depth, vtx_uv).x));	normal.z = sqrt(1.0 - normal.x * normal.x  - normal.y * normal.y);		int cnt = 0;	vec4 sump = vec4(0);	float cs = cos(34.0/180.0*PI);	float sn = sin(34.0/180.0*PI);	mat2 mr = mat2(cs,-sn, sn,cs);	float rayScale = 1.0 + 0.1 / 4.0;	mat2 ms = mat2(rayScale, 0, 0, rayScale);	vec2 sv = vec2(1.0/size.x, 0.0);	float ao = 0.0;	for (int i = 0; i < maxCount; ++i) {		sv = ms * mr * sv;			vec2 sv1 = sv + normal.xy*ep1.x*0.01;		vec3 d1 = vec3(vtx_uv, getFromDepthBuffer(texture2D(srcBuf_depth, vtx_uv + sv1).x));		d1.xy *= 1.0 + ep1.y*0.2;		float t1 = atan( tangent(depth, d1) );			vec2 sv2 = sv + normal.xy*0.2*0.01;				vec3 d2 = vec3(vtx_uv, getFromDepthBuffer(texture2D(srcBuf_depth, vtx_uv + sv2).x));		d2.xy *= 1.0 + 0.062*0.2;		float t2 = atan( tangent(depth, d2) );	             ao += clamp( (t1+t2) / PI, 0.0, 1.0 );	}	float r = 1.0 - ao / float(maxCount);	gl_FragColor = vec4(r,r,r,1.0);}]]GeometryShader = ""