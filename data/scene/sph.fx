VertexShader = [[attribute vec3 pos;attribute vec4 col;attribute vec3 nor;attribute vec2 uv;uniform mat4 proj;uniform mat4 view;uniform mat4 world;uniform vec4 p1;varying HIGHP vec2 vtx_uv;varying HIGHP vec3    vtx_nor;varying HIGHP vec4    vtx_pos;varying LOWP vec4    vtx_col;void main(void){	vtx_uv = uv;	vtx_nor = normalize((view * world * vec4(nor, 0.0)).xyz);	vtx_col = vec4(1,0,0,1);//p1;	vtx_pos = vec4(pos,1);	gl_Position = proj * view * world * vtx_pos;}]]FragmentShader = [[vec3 lerp(vec3 a, vec3 b, float r) {	return (b - a) * r + a;}uniform sampler2D color_tex; uniform vec4 color;uniform vec4 time;uniform vec4 demotime;varying HIGHP vec2 vtx_uv;varying HIGHP vec3    vtx_nor;varying HIGHP vec4    vtx_pos;varying LOWP vec4    vtx_col;void main(void){	vec4 lcol = vtx_col;	vec3 lvec = normalize(vec3(0.0,1.0,1.0));	float dt = dot(lvec, normalize(vec3(vtx_nor.xy, abs(vtx_nor.z))));	float cc = max(1.0, pow(1.0 - time.x,8.0)*8.0);	float dc = 1.0;	if (demotime.x < 206.0) {		cc = 0.8;//		dc = fract( vtx_pos.z * 1.0) + fract(vtx_pos.y*1.0);//		dc += (3.0-time.x)*0.25;	}//	if (dc < 0.5)//		discard;	gl_FragColor = vec4(cc,cc,cc,1.0) *2.0*lcol * vec4(color.rgb * max(0.0,dt*0.8+.5),color.a) * texture2D(color_tex,vtx_uv);}]]GeometryShader = ""Priority=10