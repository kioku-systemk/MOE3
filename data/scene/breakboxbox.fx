VertexShader = [[attribute vec3 pos;attribute vec4 col;attribute vec3 nor;attribute vec2 uv;uniform sampler2D color_tex;uniform mat4 proj;uniform mat4 view;uniform mat4 world;uniform vec4 p1;varying HIGHP vec2 vtx_uv;varying LOWP vec4    vtx_col;varying HIGHP vec3 vtx_nor;varying HIGHP vec4 vtx_pos;void main(void){	vtx_uv = uv;	vtx_col = col;	vtx_nor = vec4(world * vec4(nor,0)).xyz;	vtx_pos = world * vec4(pos, 1);	gl_Position = proj * view * vtx_pos;// world * vec4(pos, 1);}]]FragmentShader = [[uniform sampler2D color_tex; uniform vec4 color;uniform vec4 time;uniform vec4 p1;uniform vec4 eyepos;varying HIGHP vec3 vtx_nor;varying HIGHP vec2 vtx_uv;varying LOWP vec4  vtx_col;varying HIGHP vec4 vtx_pos;float PI = 3.1415926;/*void main(void){	vec3 eyedir = normalize(vtx_pos.xyz - eyepos.xyz);	vec3 ref = reflect(vtx_nor, eyedir);	float s1 = pow(max(0.0, dot(ref, normalize(vec3(-0.5, 0.5, 1)))), 8.0);	float s2 = pow(max(0.0, dot(ref, normalize(vec3(-1.0, 0.5, -1)))), 8.0);	float s3 = pow(max(0.0, dot(ref, normalize(vec3(0.5, -0.5, -1)))), 8.0);	vec3 s = s1*vec3(1,0.9,0.9) + s2*vec3(0.9,0.95,0.9)+s3*vec3(0.9,0.9,1);	vec3 spec = s*2.0;//vec3(s*2.0, s*2.0, s*2.0);	float d = dot(vec3(normalize(vtx_nor)), vec3(0,1,0)) * 0.5 + 0.5;	vec4 dcol = sqrt(vec4(d) * color);	gl_FragColor = vec4(spec,1.0) * texture2D(color_tex, vtx_uv);}*/const float MAXITERATIONS = 140.0;const float INCREMENT = 1.0;const float pi = 3.1415926536;const float START_ZOOM = 50.0;const vec2 	START = vec2(0.32, 0.51); const vec3	COLOR_WEIGHT = vec3(3.0, 2.0, 2.0)/MAXITERATIONS;void main( void ) {//gl_FragColor = vec4(vtx_uv, 0,1);//return;	vec2 uvs =vec2(0,0);	float tm = 1.0;//time.x;	float x0 = (vtx_uv.x+uvs.x) / START_ZOOM /tm + START.x ;	float y0 = (vtx_uv.y+uvs.y) / START_ZOOM /tm + START.y;	float x = 0.0;	float y = 0.0;	float count = 0.0;	float limit = 5.0;//(1.0 - sin(mod(0.0 * 0.7, pi))) * 100.0 + 12.1;	for (float i = 0.0; i < MAXITERATIONS; i += INCREMENT){		if (distance(x, y) > limit) {break;}		float xtemp = pow(x, 2.0) - pow(y, 2.0);		y = (2.0*x*y) + y0;		x = xtemp + x0;		count += INCREMENT;		}	gl_FragColor = vec4(count*COLOR_WEIGHT.r, count*COLOR_WEIGHT.g, count*COLOR_WEIGHT.b, 1.0);}]]GeometryShader = ""DepthTest = trueBlend = trueBlendSrc = "SRC_ALPAH"BlendDst = "ONE_MINUS_SRC_ALPHA"Priority=1