VertexShader = [[attribute vec3 pos;attribute vec4 col;attribute vec3 nor;attribute vec2 uv;uniform sampler2D color_tex;uniform mat4 proj;uniform mat4 view;uniform mat4 world;uniform vec4 p1;varying HIGHP vec2 vtx_uv;varying LOWP vec4    vtx_col;varying HIGHP vec3 vtx_nor;void main(void){	vtx_uv = uv;	vtx_col = col;	vtx_nor = normalize(nor);	gl_Position = proj * view * world * vec4(pos,1);}]]FragmentShader = [[uniform sampler2D color_tex; uniform vec4 color;uniform vec4 time;uniform vec4 p1;varying HIGHP vec2 vtx_uv;varying LOWP vec4  vtx_col;varying HIGHP vec3 vtx_nor;float PI = 3.1415926;void main(void){	float d = 1.0 - sqrt(abs(normalize(-vtx_nor).y+0.0));	d*=2.0;vec3 light_color = vec3(0.2,0.1,0.1);		vec2 position = vtx_nor.xz;	float angle = fract(atan(position.y,position.x)/(2.*3.14159265359));	float angleFract = fract(angle*256.);	float angleRnd = floor(angle*1256.)+1.;	float angleRnd1 = fract(angleRnd*fract(angleRnd*.35)*45.1);	float angleRnd2 = fract(angleRnd*fract(angleRnd*.827)*1.724);	float t = time.x*2.0+angleRnd1*10.;	float radDist = sqrt(angleRnd2+0.001);		float adist = radDist/length(position)*.1;	float dist = abs(fract(t*.1+adist)-.5);	float color =  (1.0 / (dist))*cos(0.7*(sin(t)))*adist/radDist/30.0;	gl_FragColor = vec4(color+d,color,color,1.0)*vec4(light_color,1.0)*1.5;		//gl_FragColor = vec4(d,d,d,1.0);// * texture2D(color_tex, vtx_uv);}]]GeometryShader = ""DepthTest = falseBlend = trueBlendSrc = "SRC_ALPAH"BlendDst = "ONE_MINUS_SRC_ALPHA"Priority=0