VertexShader = [[attribute vec3 pos;attribute vec4 col;attribute vec3 nor;attribute vec2 uv;uniform sampler2D color_tex;uniform mat4 proj;uniform mat4 view;uniform mat4 world;uniform vec4 p1;varying HIGHP vec2 vtx_uv;varying LOWP vec4    vtx_col;varying HIGHP vec3 vtx_nor;varying HIGHP vec4 vtx_pos;void main(void){	vtx_uv = uv;	vtx_col = col;	vtx_nor = vec4(world * vec4(nor,0)).xyz;	vtx_pos = world * vec4(pos, 1);	gl_Position = proj * view * vtx_pos;// world * vec4(pos, 1);}]]FragmentShader = [[uniform sampler2D color_tex; uniform sampler2D srcBuf;uniform vec4 color;uniform vec4 time;uniform vec4 p1;uniform vec4 eyepos;varying HIGHP vec3 vtx_nor;varying HIGHP vec2 vtx_uv;varying LOWP vec4  vtx_col;varying HIGHP vec4 vtx_pos;vec3 map(vec3 dir){	//float r = -dir.y;	float r = max(0.0,dir.y+0.2);	float l1 = max(0.0,r*1.8);	float l2 = min(1.0,max(0.0,sin(r)*2.0));	float d = l2 - l1;	float d2 = d*d*1.5;//	if (mod(dir.z,0.5) > .0){//		if (mod(dir.x,0.5) < .0){//			return vec3(0, 0, 0);//		} else {			return vec3(d2, d2, d2);//		}//	} else {//		return vec3(0, 0, 0);//	}}float fresnel(float c){  float n = 1.5;  float g = sqrt(n * n + c * c - 1.0);  float gpc = g + c;  float gmc = g - c;  float gpc1 = c * gpc - 1.0;  float gmc1 = c * gmc + 1.0;  float gc = gmc / gpc;  float gc1 = gpc1 / gmc1;  return 0.5 * gc * gc * (1.0 + gc1 * gc1);}void main(void){//vec3 light = normalize(vec3(0,1,1));vec3 light = normalize(vec3(-1, 1, -1));	vec3 eyedir = normalize(vtx_pos.xyz - eyepos.xyz);	vec3 ref = reflect(vtx_nor, eyedir);	float s1 = pow(max(0.0, dot(ref, normalize(vec3(-0.5, 0.5, -.5)))), 3.0);	float s2 = pow(max(0.0, dot(ref, normalize(vec3(0.5, 0.5, -.5)))), 3.0);	float s3 = pow(max(0.0, dot(ref, normalize(vec3(1, 0.5, 1)))), 3.0);	vec3 s = s1*vec3(1,0.8,0.8) + s2*vec3(0.8,0.95,0.8)+s3*vec3(0.8,0.8,1);	vec3 spec = s*2.0*fresnel(dot(-eyedir,vtx_nor));	float d = dot(vec3(normalize(vtx_nor)), vec3(0,1,0)) * 0.5 + 0.5;	//vec4 dcol = sqrt(vec4(d)  * color)* 4.0;	vec4 dcol = pow(vec4(d)  * color, vec4(2.0)) * 8.0;		vec3 m = normalize(vtx_nor);	vec3 sr = map(ref)*spec;		vec3 ocol = pow(dcol.xyz+sr, vec3(1.0/2.0));	gl_FragColor = vec4(ocol, 1.0) * texture2D(srcBuf, vtx_uv);/*	vec3 light = normalize(vec3(0,1,1));	vec3 m = normalize(vtx_nor);	float d = dot(light, m);	vec3 eyedir = normalize(vtx_pos.xyz - eyepos.xyz);	vec3 ref = reflect(vtx_nor, eyedir);	float s = pow(clamp(-reflect(light, m).z, 0.0, 1.0), 20.0);		gl_FragColor.rgb = vec3(mix(d, s, 0.4)) + map(ref);	gl_FragColor.a = 1.0;	gl_FragColor *= color;*/}]]GeometryShader = ""DepthTest = trueBlend = trueBlendSrc = "SRC_ALPAH"BlendDst = "ONE_MINUS_SRC_ALPHA"Priority=1