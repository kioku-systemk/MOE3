VertexShader = [[attribute vec3 pos;attribute vec4 col;attribute vec3 nor;attribute vec2 uv;uniform mat4 proj;uniform mat4 view;uniform mat4 world;uniform vec4 p1;varying HIGHP vec2 vtx_uv;varying HIGHP vec3    vtx_nor;varying LOWP vec4    vtx_col;void main(void){	vtx_uv = uv;	vtx_nor = -normalize((world * vec4(nor, 0.0)).xyz);	vtx_col = col;	gl_Position = proj * view * world * vec4(pos,1);}]]FragmentShader = [[vec3 lerp(vec3 a, vec3 b, float r) {	return (b - a) * r + a;}uniform sampler2D color_tex; uniform vec4 color;uniform vec4 time;uniform vec4 p1;varying HIGHP vec2 vtx_uv;varying HIGHP vec3    vtx_nor;varying LOWP vec4    vtx_col;void main(void){	vec4 lcol = vtx_col;	vec3 col1 = vec3(0.8,0.4,0.6)*p1.x;	vec3 col2 = vec3(0.8,0.2,0.3)*p1.y;	float cr  = normalize(vtx_nor).y;	vec3 col = lerp(col1,col2,cr);	gl_FragColor = vec4(col,1);}]]GeometryShader = ""