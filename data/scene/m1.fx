VertexShader = [[attribute vec3 pos;attribute vec4 col;attribute vec3 nor;attribute vec2 uv;uniform mat4 proj;uniform mat4 view;uniform mat4 world;uniform vec4 p1;varying HIGHP vec2 vtx_uv;varying HIGHP vec3    vtx_nor;varying LOWP vec4    vtx_col;void main(void){	vtx_uv = uv;	vtx_nor = normalize((view * world * vec4(nor, 0.0)).xyz);	vtx_col = col;	gl_Position = proj * view * world * vec4(pos,1);}]]FragmentShader = [[vec3 lerp(vec3 a, vec3 b, float r) {	return (b - a) * r + a;}uniform sampler2D color_tex; uniform vec4 color;uniform vec4 time;varying HIGHP vec2 vtx_uv;varying HIGHP vec3    vtx_nor;varying LOWP vec4    vtx_col;void main(void){	vec4 lcol = vtx_col;	gl_FragColor = vec4(1,1,1,1);}]]GeometryShader = ""